version = 1

[values]
ContainerImage = "ssh"

# Check that rsync steps work
[[steps]]
[steps.rsync]
source = "data/"
dest = "/virter"

# Check that container steps work
[[steps]]
[steps.container]
image = "{{ .ContainerImage }}"
command = ["sh", "-exc", """
mkdir -p /virter/out
test -n "$TARGETS"
IFS=,; for t in $TARGETS; do
    # Some old SSH versions only support the now deprecated ssh-rsa signature
    test "$t" = "$(ssh -o "PubkeyAcceptedKeyTypes +ssh-rsa" -o "HostKeyAlgorithms +ssh-rsa" $t hostname -s)"
    scp -o "PubkeyAcceptedKeyTypes +ssh-rsa" -o "HostKeyAlgorithms +ssh-rsa" -r $t:/virter/example.txt example.txt
    sha256sum -c /virter/workspace/data/example.txt.sha256sum
    mv example.txt /virter/out/example-$t.txt
done
"""]
[steps.container.copy]
source = "/virter/out"
dest = "{{ .OutDir }}"

# Checks that the previous container step copied files as expected
[[steps]]
[steps.container]
image = "{{ .ContainerImage }}"
command = ["sh", "-exc", """
IFS=,; for t in $TARGETS; do
    test -f "/virter/workspace/{{ .OutDir }}/out/example-$t.txt"
done
"""]

# Checks that shell steps work as expected
[[steps]]
[steps.shell]
script = '''
set -ex

test -f /virter/example.txt
cd /virter
sha256sum -c example.txt.sha256sum

command -v systemctl || exit 1

# Need to reset this state, as ifup fails when devices are configured that do not exist on the node.
systemctl reset-failed "network*.service" || true

while true; do
	running=$(systemctl is-system-running || true)
	[ "$running" = initializing -o "$running" = starting ] && { sleep 1; continue; }
	[ "$running" = running ] && break
	echo "System in unexpected state '$running'; failed units:" 1>&2
	systemctl list-units --failed 1>&2
	exit 1
done

NR_ADDRS=0
while read IDX NAME ; do
    case "$NAME" in
    lo)
      # skip loopback interface
      ;;
    eth*|enp*s0)
      # Should have IP address, and be online
      ip -oneline -4 addr show dev $NAME | grep -q "inet" || exit 1
      ip -oneline link show dev $NAME | grep -q "state UP" || exit 1
      NR_ADDRS=$(($NR_ADDRS + 1))
      ;;
    *)
      echo Unexpected network interface $NAME 1>&2
      exit 1
      ;;
    esac
done < <(ip -oneline link show | grep -oP "^\d+:\s\w+")

# Should have two networks configured
test $NR_ADDRS -eq 2
'''
