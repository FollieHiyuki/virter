image: golang:buster

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == 'master'

stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
    - GOPATH=$(pwd)/.mygo go build
  artifacts:
    paths:
      - virter
    expire_in: 1 week

test:
  stage: test
  cache:
    paths:
      - .mygo/pkg/mod
  script:
    - GOPATH=$(pwd)/.mygo go version
    - GOPATH=$(pwd)/.mygo go install github.com/jstemmer/go-junit-report@latest
    - GOPATH=$(pwd)/.mygo go get github.com/vektra/mockery/.../
    - GOPATH=$(pwd)/.mygo PATH=$PATH:$(go env GOPATH)/bin go generate ./...
    - GOPATH=$(pwd)/.mygo go test -v -coverprofile .testCoverage.txt ./... 2>&1 | $(pwd)/.mygo/bin/go-junit-report -set-exit-code > test.xml
    - GOPATH=$(pwd)/.mygo go tool cover -func=.testCoverage.txt
  artifacts:
    reports:
      junit: test.xml

lint:
  stage: test
  rules:
    - if: $CI_MERGE_REQUEST_ID
  image: golangci/golangci-lint:v1.39-alpine
  script:
    - GOPATH=$(pwd)/.mygo go get github.com/vektra/mockery/.../
    - GOPATH=$(pwd)/.mygo PATH=$PATH:$(go env GOPATH)/bin go generate ./...
    - golangci-lint version
    - echo "Linting new code relative to branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - golangci-lint run --new-from-rev="remotes/origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" --out-format="junit-xml" > lint.xml
  allow_failure: true
  artifacts:
    reports:
      junit:
        - lint.xml

deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
  dependencies:
    - build
  before_script:
    - echo "DEPLOY"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/linbit/virter/virter:latest .
    - docker push $CI_REGISTRY/linbit/virter/virter:latest
  tags:
    - shell
