image: golang:buster

stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
    - GOPATH=$(pwd)/.mygo go build
  artifacts:
    paths:
      - virter
    expire_in: 1 week

test:
  stage: test
  cache:
    paths:
      - .mygo/pkg/mod
  script:
    - GOPATH=$(pwd)/.mygo go get github.com/vektra/mockery/.../
    - GOPATH=$(pwd)/.mygo PATH=$PATH:$(go env GOPATH)/bin go generate ./...
    - GOPATH=$(pwd)/.mygo go test -coverprofile .testCoverage.txt ./internal/virter/
    - GOPATH=$(pwd)/.mygo go tool cover -func=.testCoverage.txt

lint:
  # run golangci-lint on every commit. when we are in a merge request, only check
  # the changes inside that MR, otherwise check the whole codebase
  # (note: $CI_COMMIT_BEFORE_SHA is set to "" when we are not in a merge request,
  # but golangci-lint conventiently ignores the --new-from-rev flag when it's
  # empty, and so it checks the entire codebase like we want).
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    - GOPATH=$(pwd)/.mygo go get github.com/vektra/mockery/.../
    - GOPATH=$(pwd)/.mygo PATH=$PATH:$(go env GOPATH)/bin go generate ./...
    - golangci-lint run --new-from-rev="$CI_COMMIT_BEFORE_SHA" --out-format="line-number"
  allow_failure: true

deploy:
  stage: deploy
  dependencies:
    - build
  before_script:
    - echo "DEPLOY"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/linbit/virter/virter:latest .
    - docker push $CI_REGISTRY/linbit/virter/virter:latest
  tags:
    - shell
  only:
    - master
